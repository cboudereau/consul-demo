receivers:
  # otelcontribcol metrics + host metrics
  prometheus/otelcontribcol:
    config:
      scrape_configs:
        - job_name: otelcontribcol
          scrape_interval: 10s
          static_configs:
            - targets: [0.0.0.0:8888]
  hostmetrics:
    collection_interval: 10s
    scrapers:
      load:
      filesystem:
      memory:
      network:

  # client log parsing
  filelog:
    include: [ /app/log/*.log ]
    storage: file_storage/client
    attributes:
      service.name: client
      application: ${service.name}
      host: ${env:HOSTNAME}
    operators:
      - type: key_value_parser
        delimiter: "="
        pair_delimiter: "\t"
        timestamp:
          parse_from: attributes.timestamp
          layout_type: gotime
          layout: '2006/01/02 15:04:05.999'

exporters:
  logging:
    verbosity: detailed
  loki:
    endpoint: http://loki:3100/loki/api/v1/push
  otlphttp/mimir:
    endpoint: http://mimir2:9009/otlp
    # compression: none
    
processors:
  attributes/otelcontribcol:
    actions:
      - action: insert
        key: service.namespace
        value: otelcontribcol-agent
  attributes/app:
    actions:
      - action: insert
        key: service.namespace
        value: otelcontribcol-app
  attributes/loki:
    actions:
      - action: insert
        key: loki.attribute.labels
        value: H, host, application, service.name, service.namespace

extensions:
  health_check:
  pprof:
  zpages:
  file_storage/client:
    directory: /app/logstate/client

service:
  extensions: [file_storage/client, health_check, pprof, zpages]
  pipelines:
    logs/client:
      receivers: [filelog]
      processors: [attributes/app, attributes/loki]
      exporters: [logging, loki]
    metrics/otelcontribcol:
      receivers: [prometheus/otelcontribcol, hostmetrics]
      processors: [attributes/otelcontribcol]
      exporters: [logging, otlphttp/mimir]